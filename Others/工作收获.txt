1.参数大于两个以上，需要创建一个vo
2.判断字符串为空，必须使用Guava的StringUtils
3.调用一个dubbo接口，及时新增dubbo配置
4.controller中的代码尽量写少点，可以使用配置好的@ControllerWrapper注解(通过AOP实现)，让性能监控和异常包裹住controller，有的不能精简的业务逻辑，可以在service中把几个service方法重新组织起来
5.controller的参数必须用vo，不许用实体类
6.判断什么时候return false，什么时候抛出异常，Biz Exception一般是业务逻辑异常，在不合法的情况下，会抛出异常
7.BigDecmial数值比较的结果，是-1，0，1，分别代表小于，等于，大于。但是判断结果的时候(比如小于)，需要用 compareTo() < 0，因为有时候返回结果可能是-2，-3...
8.所有的RespVo和ReqVo需要分开写，即使他们里边的属性是相同的
9.前端请求一个方法：方法由主流程和次流程组成，如果次流程时间开销比较大，就需要把次流程作为一个“异步操作”，比如QMQ/@Async注解/开启一个线程池
10.状态的修改：状态机的状态的修改，需要确定上一次的状态是否正确，必须从状态2才能变为状态3，不能从状态1直接变为状态3，当前状态为状态2是更新状态3的where条件之一
11.BizRunTimeException/ResultData 等給前端返回的信息，用户体验
12.多线程阻塞invokeAll也可以
13.400一般是客户端的问题，通常情况下都是字段有问题，
14.比如要分别查出来状态是init的和状态是match的(这两个状态在同一块代码里)，我们经常写两条sql分别查询，但是我们只需要一条sql全量查出，然后
在内存中根据状态进行group by操作
---------------------------------------------------------------------------------------------------------
1.python

2.数学基础
	1.概率论*
	2.统计学*
	3.信息学
	4.微积分

3.机器学习:分类，概率预测，回归

4.语音分析/图像识别

5.回归(数值)/逻辑回归(概率,分类)/树(各种树)/bost/森林


1.http各状态码含义
2.http请求的结构，请求头，contentType的含义
3.cpu load高，如何解决
4.OOM如何排查
5.beta的ng，看QA的wiki
6.QTrace看日志
7.血的教训，线上和beta的加密方式不同，切记切记


tech：
1.声明为事务的方法不能在本方法中调用
2.lambda表达式会吞掉异常，导致异常无法显式抛出
3.for循环遍历的时候，要判断如果循环的时候出现异常，遍历终止，会出现什么情况。因此，最好使用try-catch捕获并抛出异常。
4.如何进行系统的兼容，适配器的设计模式
5.http各个状态码
6.线程池声明的位置和线程池的生命周期

规范：
1.sql分开提
2.提的sql务必好好看一下，很有可能引发大的故障
3.

/**
     * ######使用es小贴士######
     *
     * 一般主要再buildBaseParam()基础上增加 setDslCommand,setMaxSize,id
     *
     * index:
     * id一般选填,setDslCommand
     *
     * delete:
     * 只需要传id
     *
     * update:
     * id必填,setDslCommand,按字段更新
     *
     * get:
     * 只需要传id
     *
     * query:
     * setDslCommand
     * 可能设置setMaxSize
     *
     * scroll:
     * 提供分页的
     * 
     * 范围查询 RangeQueryBuilder：
     * rangeQueryBuilder.gte().lt();
     */

















dubbo出入口加上监控
怎么让方法异步调用(线程池？)
线程池的worker配合阻塞队列

inner join和left join的区别，我认为最主要的区别是：inner join在where条件中对结果集(交集)进行了限制，














